"""
Visualizaci√≥n de Datos Deportivos - Le Mans
==========================================
Script especializado para generar visualizaciones de los datos
ya procesados en la base de datos SQLite.

Prerrequisito: Ejecutar primero main.py para procesar los datos.

Autor: Sistema ETL
Fecha: 2025
"""

import os
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path para importaciones
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from app.Visualize.SportsVisualizer import SportsVisualizer
from app.Config.config import Config


def print_header():
    """Imprime el encabezado del programa."""
    print("=" * 60)
    print("üìä GENERADOR DE VISUALIZACIONES - LE MANS DATA üìä")
    print("=" * 60)
    print()


def check_database_exists():
    """
    Verifica que la base de datos existe antes de generar visualizaciones.
    
    Returns:
        bool: True si la base de datos existe, False en caso contrario
    """
    if not os.path.exists(Config.SQLITE_DB_PATH):
        print("‚ùå ERROR: Base de datos no encontrada")
        print(f"   Buscando: {Config.SQLITE_DB_PATH}")
        print()
        print("üí° SOLUCI√ìN:")
        print("   1. Ejecuta primero: python main.py")
        print("   2. Aseg√∫rate de que el proceso ETL se complete exitosamente")
        print("   3. Luego ejecuta este script de visualizaci√≥n")
        return False
    
    print(f"‚úÖ Base de datos encontrada: {Config.SQLITE_DB_PATH}")
    return True


def visualize_data():
    """
    Ejecuta la generaci√≥n de todas las visualizaciones.
    
    Returns:
        bool: True si la visualizaci√≥n fue exitosa, False en caso contrario
    """
    print("\n" + "="*50)
    print("üé® INICIANDO GENERACI√ìN DE VISUALIZACIONES")
    print("="*50)
    
    try:
        # Crear visualizador
        print("üîß Inicializando visualizador...")
        visualizer = SportsVisualizer()
        
        # Generar todas las gr√°ficas
        success = visualizer.generate_all_charts()
        
        if success:
            print("\n‚úÖ VISUALIZACI√ìN COMPLETADA EXITOSAMENTE")
            print(f"üìÅ Gr√°ficas disponibles en: {Config.CHARTS_OUTPUT_DIR}")
            
            # Listar archivos generados
            charts_dir = Config.CHARTS_OUTPUT_DIR
            if os.path.exists(charts_dir):
                chart_files = [f for f in os.listdir(charts_dir) if f.endswith('.png')]
                if chart_files:
                    print("\nüìä GR√ÅFICAS GENERADAS:")
                    for i, chart_file in enumerate(sorted(chart_files), 1):
                        print(f"   {i}. üñºÔ∏è  {chart_file}")
                        
                    print(f"\nüí° TIP: Abre la carpeta {charts_dir} para ver las gr√°ficas")
            
            return True
        else:
            print("\n‚ùå ERROR EN LA VISUALIZACI√ìN")
            print("‚ö†Ô∏è  Revisa los mensajes de error anteriores")
            return False
        
    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO EN VISUALIZACI√ìN: {e}")
        return False


def print_summary(success):
    """
    Imprime el resumen final del proceso de visualizaci√≥n.
    
    Args:
        success (bool): Si el proceso fue exitoso
    """
    print("\n" + "="*60)
    print("üìã RESUMEN DE VISUALIZACI√ìN")
    print("="*60)
    
    if success:
        print("üéâ ¬°VISUALIZACI√ìN COMPLETADA CON √âXITO!")
        print("‚úÖ Todas las gr√°ficas generadas correctamente")
        print(f"üìÇ Ubicaci√≥n: {Config.CHARTS_OUTPUT_DIR}")
        print("\nüìä TIPOS DE AN√ÅLISIS GENERADOS:")
        print("   ‚Ä¢ An√°lisis de Velocidad")
        print("   ‚Ä¢ An√°lisis de Resistencia") 
        print("   ‚Ä¢ An√°lisis Temporal")
        print("   ‚Ä¢ Dashboard Resumen")
    else:
        print("‚ùå VISUALIZACI√ìN FALL√ì")
        print("‚ö†Ô∏è  Revisa los errores mostrados anteriormente")
        print("\nüîß POSIBLES SOLUCIONES:")
        print("   ‚Ä¢ Verifica que la base de datos existe (ejecuta main.py)")
        print("   ‚Ä¢ Comprueba que las dependencias est√°n instaladas")
        print("   ‚Ä¢ Revisa permisos de escritura en la carpeta Charts/")
    
    print("="*60)


def main():
    """
    Funci√≥n principal que ejecuta la generaci√≥n de visualizaciones.
    """
    import time
    start_time = time.time()
    
    # Imprimir encabezado
    print_header()
    
    success = False
    
    try:
        # Verificar prerrequisitos
        if not check_database_exists():
            return
        
        # Generar visualizaciones
        success = visualize_data()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Proceso interrumpido por el usuario")
        success = False
    except Exception as e:
        print(f"\n‚ùå ERROR INESPERADO: {e}")
        success = False
    
    finally:
        # Calcular tiempo transcurrido
        end_time = time.time()
        elapsed_time = end_time - start_time
        
        # Mostrar resumen
        print_summary(success)
        print(f"‚è±Ô∏è  Tiempo total: {elapsed_time:.2f} segundos")
        
        # C√≥digo de salida
        if success:
            print("\nüöÄ ¬°Visualizaci√≥n finalizada con √©xito!")
            print("üí° Revisa las gr√°ficas generadas en la carpeta Charts/")
            sys.exit(0)
        else:
            print("\nüí• Visualizaci√≥n fall√≥")
            sys.exit(1)


if __name__ == "__main__":
    main()
